# Implementation of classic arcade game Pong -- yashjain28

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos= HEIGHT/2
paddle2_pos= HEIGHT/2
l = PAD_HEIGHT
ball_pos = [WIDTH/2, HEIGHT/2]
vel = [4,4]
paddle1_vel = 0
paddle2_vel = 0
s = 5
bs0 = 4
bs1 = 6
score1 = 0
score2 = 0
ball_pos[0]=WIDTH/2
ball_pos[1]=HEIGHT/2
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2, ball_pos, WIDTH, HEIGHT, vel  # these are ints
    score1 = 0
    score2 = 0 
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    ball_pos[0]=WIDTH/2
    ball_pos[1]=HEIGHT/2
    if random.randrange(0,2):
        vel[0]=random.randrange(2,4)
        vel[1]=random.randrange(1,4)
    else:
        vel[0]=-random.randrange(2,4)
        vel[1]=random.randrange(1,4)

    

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel , WIDTH, bs, paddle1_vel, paddle2_vel
    global HALF_PAD_HEIGHT, PAD_WIDTH, BALL_RADIUS
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # update ball
    ball_pos[0] = ball_pos[0] + vel[0]
    ball_pos[1] = ball_pos[1] + vel[1]
    if ((ball_pos[0]+BALL_RADIUS >= WIDTH-1-PAD_WIDTH) and ((ball_pos[1]<paddle2_pos+HALF_PAD_HEIGHT+BALL_RADIUS/2) and (ball_pos[1]>paddle2_pos-HALF_PAD_HEIGHT- BALL_RADIUS/2))) :
        vel[0]=-vel[0]
        if vel[0] < 0:
            vel[0]-=1
        else:
            vel[0]+=1
    elif ball_pos[0]-BALL_RADIUS <= PAD_WIDTH and ((ball_pos[1]<paddle1_pos+HALF_PAD_HEIGHT+BALL_RADIUS/2) and (ball_pos[1]>paddle1_pos-HALF_PAD_HEIGHT-BALL_RADIUS/2)):
        vel[0]=-vel[0]
        if vel[0] < 0:
            vel[0]-=1
        else:
            vel[0]+=1
    
    elif ball_pos[0]-BALL_RADIUS <= PAD_WIDTH:
        score2+=1
        ball_pos[0]=WIDTH/2
        ball_pos[1]=HEIGHT/2
        if random.randrange(0,2):
            vel[0]=random.randrange(2,4)
            vel[1]=random.randrange(1,4)
        else:
            vel[0]=random.randrange(2,4)
            vel[1]=-random.randrange(1,4)
        
            
    elif ball_pos[0]+BALL_RADIUS >= WIDTH-1-PAD_WIDTH:
        score1+=1
        ball_pos[0]=WIDTH/2
        ball_pos[1]=HEIGHT/2
        if random.randrange(0,2):
            vel[0]=-random.randrange(2,5)
            vel[1]=random.randrange(1,5)
        else:
            vel[0]=-random.randrange(2,5)
            vel[1]=-random.randrange(1,5)
   
    
    if ball_pos[1]<=BALL_RADIUS:
        vel[1]=-vel[1] 
    if ball_pos[1]>= HEIGHT-1-BALL_RADIUS:
        vel[1]=-vel[1]        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
    # update paddle's vertical position, keep paddle on the screen
   
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    if paddle1_pos <= HALF_PAD_HEIGHT:
        paddle1_pos = HALF_PAD_HEIGHT
    if paddle1_pos >= HEIGHT-1-HALF_PAD_HEIGHT:
        paddle1_pos = HEIGHT-1-HALF_PAD_HEIGHT
    if paddle2_pos <= HALF_PAD_HEIGHT:
        paddle2_pos = HALF_PAD_HEIGHT
    if paddle2_pos >= HEIGHT-1-HALF_PAD_HEIGHT:
        paddle2_pos = HEIGHT-1-HALF_PAD_HEIGHT    
    
    # draw paddles
    canvas.draw_polygon([[0,paddle1_pos-l/2],[PAD_WIDTH/2,paddle1_pos-l/2],[PAD_WIDTH/2,paddle1_pos+l/2],[0,paddle1_pos+l/2]], 8, 'Yellow')
    canvas.draw_polygon([[WIDTH-PAD_WIDTH/2,paddle2_pos-l/2],[WIDTH-1,paddle2_pos-l/2],[WIDTH-1,paddle2_pos+l/2],[WIDTH-PAD_WIDTH/2,paddle2_pos+l/2]], 8, 'Yellow')
       
    # determine whether paddle and ball collide    
    
    # draw scores
    canvas.draw_text("player1  "+str(score1),(20,20), 25, "White")
    canvas.draw_text("player2  "+str(score2),(480,20), 25, "White")
        
def keydown(key):
    global paddle1_vel, paddle2_vel, s
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel+=s
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel-=s
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel+=s
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel-=s
        
        
   
def keyup(key):
    global paddle1_vel, paddle2_vel, s
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel-=s
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel+=s
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel-=s
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel+=s

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game)

# start frame
new_game()
frame.start()
